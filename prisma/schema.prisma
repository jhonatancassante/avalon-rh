generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?     @unique
  role          String      @default("user")
  image         String?
  emailVerified DateTime?
  isComplete    Boolean     @default(false)
  isDeleted     Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  photo         Photo?
  profile       Profile?
  accounts      Account[]
  sessions      Session[]
  userEvents    UserEvent[]

  @@map("users")
}

model Profile {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  cpf          String
  completeName String
  socialName   String
  nickname     String
  pronoun      String
  pixKey       String
  contactEmail String
  phone        String
  birthdate    DateTime
  isPcd        Boolean      @default(false)
  deficiency   String[]
  extraSupport String[]
  city         String
  state        String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  userId       String       @unique @db.ObjectId
  user         User         @relation(fields: [userId], references: [id])
  eventSector  EventSector?

  @@map("profiles")
}

model Photo {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  asset_id     String
  display_name String
  height       Int
  public_id    String
  url          String
  width        Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String   @unique @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])

  @@map("photos")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationTokens")
}

model Event {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  edition             Int
  date                DateTime
  state               String
  city                String
  areInscriptionsOpen Boolean       @default(false)
  dateToOpen          DateTime      @default(now())
  dateToClose         DateTime
  isFinished          Boolean       @default(false)
  isDeleted           Boolean       @default(false)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  userEvents          UserEvent[]
  eventSectors        EventSector[]

  @@map("events")
}

model Sector {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String        @unique
  isDeleted    Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  eventSectors EventSector[]

  @@map("sectors")
}

model UserEvent {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  eventId   String   @db.ObjectId
  event     Event    @relation(fields: [eventId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("userEvents")
}

model EventSector {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  eventId   String   @db.ObjectId
  event     Event    @relation(fields: [eventId], references: [id])
  sectorId  String   @db.ObjectId
  sector    Sector   @relation(fields: [sectorId], references: [id])
  profileId String   @unique @db.ObjectId
  leader    Profile  @relation(fields: [profileId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("eventSectors")
}
