generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  role          String    @default("user")
  image         String?
  emailVerified DateTime?
  isComplete    Boolean   @default(false)
  paymentBonus  Float     @default(0.0)

  positionId String?          @db.ObjectId
  photo      Photo?
  profile    Profile?
  position   Position?        @relation(fields: [positionId], references: [id])
  accounts   Account[]
  sessions   Session[]
  userEvents UserEventApply[]
  sectors    Sector[]

  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Profile {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  cpf          String
  completeName String
  socialName   String
  nickname     String
  pronoun      String
  pixKey       String
  contactEmail String
  phone        String
  birthdate    DateTime
  isPcd        Boolean  @default(false)
  deficiency   String[]
  extraSupport String[]
  city         String
  state        String

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

model Photo {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  asset_id     String
  display_name String
  height       Int
  public_id    String
  url          String
  width        Int

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("photos")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationTokens")
}

model Event {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  edition             Int
  date                DateTime
  state               String
  city                String
  areInscriptionsOpen Boolean  @default(false)
  dateToOpen          DateTime @default(now())
  dateToClose         DateTime
  isFinished          Boolean  @default(false)

  userEvents   UserEventApply[]
  eventSectors EventSector[]

  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("events")
}

model Sector {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  leaderId         String             @db.ObjectId
  leader           User               @relation(fields: [leaderId], references: [id])
  eventSectors     EventSector[]
  userEventsSector UserSectorsApply[]

  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sectors")
}

model Level {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  name       String  @unique
  isLcaApply Boolean @default(false)
  points     Int     @default(0)
  pointsLca  Int     @default(0)

  positions Position[]

  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("levels")
}

model Position {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  payment  Float   @default(0.0)
  isLeader Boolean @default(false)

  levelId String @db.ObjectId
  level   Level  @relation(fields: [levelId], references: [id])
  users   User[]

  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("positions")
}

model UserEventApply {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId           String             @db.ObjectId
  eventId          String             @db.ObjectId
  user             User               @relation(fields: [userId], references: [id])
  event            Event              @relation(fields: [eventId], references: [id])
  userEventSectors UserSectorsApply[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("userEventApplys")
}

model UserSectorsApply {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  optionOrder Int

  userEventId String         @db.ObjectId
  sectorId    String         @db.ObjectId
  userEvent   UserEventApply @relation(fields: [userEventId], references: [id])
  sector      Sector         @relation(fields: [sectorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("userSectorsApplys")
}

model EventSector {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  eventId  String @db.ObjectId
  sectorId String @db.ObjectId
  event    Event  @relation(fields: [eventId], references: [id])
  sector   Sector @relation(fields: [sectorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("eventSectors")
}

model Configs {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  key   String  @unique
  value Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("configs")
}
